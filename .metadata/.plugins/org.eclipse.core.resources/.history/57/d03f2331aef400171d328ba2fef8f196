package com.adnaloy.librosykekas.basics;

import com.adnaloy.librosykekas.basics.interfaces.ResizeAndCropLocal;
import java.io.*;
import javax.imageio.*;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;

/**
 * Session Bean implementation class ResizeAnCrop
 */
@Stateless(mappedName = "ResizeAnCrop")
@LocalBean
public class ResizeAndCrop implements ResizeAndCropLocal {

    /**
     * Default constructor. 
     */
	private String destination;
	private String name;
	private String origen;
	private int width;
	private int height;
	private String extension;
	
	
	
    public String getDestination() {
		return destination;
	}


	public void setDestination(String destination) {
		this.destination = destination;
	}


	public String getName() {
		return name;
	}


	public void setName(String name) {
		this.name = name;
	}


	public String getOrigen() {
		return origen;
	}


	public void setOrigen(String origen) {
		this.origen = origen;
	}

	

	public int getWidth() {
		return width;
	}


	public void setWidth(int width) {
		this.width = width;
	}


	public int getHeight() {
		return height;
	}


	public void setHeight(int height) {
		this.height = height;
	}

	
	
	public String getExtension() {
		return extension;
	}


	public void setExtension(String extension) {
		this.extension = extension;
	}


	public ResizeAndCrop() {
        // TODO Auto-generated constructor stub
    }
    
	public void doIt() {
		
		try {
			BufferedImage originalImage = ImageIO.read(new File(origen + name + extension));
			cropImageToGivenSize(originalImage, width, height);
		}catch (IOException e) {
			
		}
	}
    
	private static void cropImageToGivenSize(BufferedImage originalImage, int targetWidth, int targetHeight) throws IOException {
        System.out.println("Originale Dimension: " + originalImage.getWidth() + "x" + originalImage.getHeight());

        float widthRatio = (float)originalImage.getWidth() / targetWidth;
        float heightRatio =(float)originalImage.getHeight() / targetHeight;

        BufferedImage resizedImage = originalImage;
        int resizedWidth = originalImage.getWidth();
        int resizedHeight = originalImage.getHeight();
        if(widthRatio > heightRatio){ //shrink to fixed height
            resizedWidth = Math.round(originalImage.getWidth() / heightRatio);
            resizedHeight = targetHeight;
        }else{ //shrink to fixed width
            resizedWidth = targetWidth;
            resizedHeight = Math.round(originalImage.getHeight() / widthRatio);
        }
        resizedImage = resizeImage(originalImage, originalImage.getType(), resizedWidth, resizedHeight);

        int startX = resizedWidth/2 - targetWidth/2;
        int startY = resizedHeight/2 - targetHeight/2;
        BufferedImage SubImage = resizedImage.getSubimage(startX, startY, targetWidth, targetHeight);
        System.out.println("Croppede Dimension: " + SubImage.getWidth() + "x" + SubImage.getHeight());

        File outputfile = new File(destination.concat(name.concat(extension)) "C://exchange/test_after_crop_2.jpg");
        ImageIO.write(SubImage, "jpg", outputfile);

        System.out.println("Imageped successfully: "+outputfile.getPath());
    }

    private static BufferedImage resizeImage(BufferedImage originalImage, int type,
                                             Integer img_width, Integer img_height)
    {
        BufferedImage resizedImage = new BufferedImage(img_width, img_height, type);
        Graphics2D g = resizedImage.createGraphics();
        g.drawImage(originalImage, 0, 0, img_width, img_height, null);
        g.dispose();

        return resizedImage;
    }

}
