package com.adnaloy.librosykekas.basics;

import com.adnaloy.librosykekas.basics.interfaces.ResizeAnCropLocal;
import ij.*;
import ij.io.*;
import ij.process.*;
import java.io.*;
import javax.imageio.*;
import javax.imageio.stream.*;
import java.awt.image.BufferedImage;
import javax.ejb.Local;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;

/**
 * Session Bean implementation class ResizeAnCrop
 */
@Stateless(mappedName = "/ResizeAnCrop")
@Local(ResizeAnCropLocal.class)
@LocalBean
public class ResizeAnCrop implements ResizeAnCropLocal {

    /**
     * Default constructor. 
     */
	private String destination;
	private String name;
	
	
	
    public String getDestination() {
		return destination;
	}


	public void setDestination(String destination) {
		this.destination = destination;
	}


	public String getName() {
		return name;
	}


	public void setName(String name) {
		this.name = name;
	}


	public ResizeAnCrop() {
        // TODO Auto-generated constructor stub
    }
    
    
    public void proccesImage() {
    	 String url = "http://imagej.nih.gov/ij/images/lena-std.tif";
    	 ImagePlus imp = IJ.openImage(url);
    	 try {
    		 cropAndResize(imp, 400, 100,destination,name);
    	 }catch(Exception e) {
    		 System.out.println("error proccessing image");
    	 }
    }
    
    public static void cropAndResize(ImagePlus imp, int targetWidth, int targetHeight, String destination,String name) throws Exception{
        ImageProcessor ip = imp.getProcessor();
        ip.setInterpolationMethod(ImageProcessor.BILINEAR);
        ip = ip.resize(targetWidth * 2, targetHeight * 2);

        int cropX = ip.getWidth() / 2;
        int cropY = ip.getHeight() / 2;
        ip.setRoi(cropX, cropY, targetWidth, targetHeight);
        ImageProcessor cropped = ip.crop();
        BufferedImage croppedImage = ip.getBufferedImage();

        //new ImagePlus("croppedImage", croppedImage).show();

        ImageIO.write(croppedImage, "jpg", new File(destination.concat(name).concat(".jpg")));
    }

}
