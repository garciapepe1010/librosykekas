<server description="Liberty beta">

    <featureManager>
        <feature>webProfile-8.0</feature>
        <feature>adminCenter-1.0</feature>
        <feature>restConnector-2.0</feature>
        <feature>transportSecurity-1.0</feature>
        <feature>microProfile-1.2</feature>
        <feature>audit-1.0</feature>
        <feature>bluemixLogCollector-1.1</feature>
        <feature>logstashCollector-1.1</feature>
        <feature>validator-1.0</feature>
        <feature>localConnector-1.0</feature>
    	<feature>javaee-8.0</feature>
    	<feature>jsp-2.2</feature>
	</featureManager>
	
	<keyStore id="defaultKeyStore" password="keyStorePwd"/>
	
	<basicRegistry id="basic">
      <user name="admin" password="adminpwd"/>
      <user name="nonadmin" password="nonadminpwd"/>
      <user name="librosykekasadmin" password="morrigan12"/>
         <group name="librosykekasadmin">
			<member name="librosykekasadmin"/>
		</group>
   </basicRegistry>
   
   <administrator-role>
      <user>admin</user>
   </administrator-role> 
   



    <!-- This template enables security necessary for Admin Center and some beta features.
         To get the full use of all the capabilities, a keystore and user registry are required. -->

    <!-- For the keystore, default keys are generated and stored in a keystore.
         To provide the keystore password, generate an encoded password using
         bin/securityUtility encode and add it below in the password attribute
         of the keyStore element. Then uncomment the keyStore element. -->
    <!--
    <keyStore password=""/>
    -->

    <!--Configure a basic user registry using the basicRegistry element.
        Specify your own user name below in the name attribute of the user element.
        For the password, generate an encoded password using bin/securityUtility encode
        and add it in the password attribute of the user element. -->
    <!--
    <basicRegistry id="basic" realm="BasicRealm">
        <user name="yourUserName" password="" />
    </basicRegistry>
     -->

    <!-- To access this server from a remote client add a host attribute to the
         httpEndpoint element, e.g. host="*" -->
    <httpEndpoint httpPort="9080" httpsPort="9443" id="defaultHttpEndpoint"/>

    <!-- Automatically expand WAR files and EAR files -->
    <applicationManager autoExpand="true"/>

    <!-- This is sample configuration for the bluemixLogCollector-1.1 feature -->
    <!--
    <keyStore id="javaKeyStore" location="${java.home}/lib/security/cacerts" password="changeit" />
    <ssl id="mySSLConfig" trustStoreRef="javaKeyStore" keyStoreRef="defaultKeyStore" />

    <bluemixLogCollector
        source="message,trace,garbageCollection,ffdc,accessLog"
        hostName="logs.opvis.bluemix.net"
        port="9091"
        tenant="your_logmet_space_Id"
        password="your_logmet_logging_token"
        sslRef="mySSLConfig"
    />
    -->
    <!-- This is sample configuration for the logstashCollector-1.1 feature -->
    <!--
    <logstashCollector sslRef="testSSLConfig" hostName="localhost" port="46000" >
        <source>accesslog</source>
        <source>message</source>
        <source>logs</source>
        <source>ffdc </source>
        <source>trace</source>
        <source>garbageCollection</source>
    </logstashCollector>
    -->
    
    <!-- This is sample configuration for the validator-1.0 feature.
    
         The validator-1.0 feature can currently be used to test a <dataSource> configuration
         element to determine if a successful connection can be made to the backend database.
         To test a data source connection using API Discovery, go to the following URL and
         expand the "Validator REST APIs" section in the API Discovery web interface:      
           https://localhost:9443/ibm/api/explorer/
    -->
    <!-- 
    <featureManager>
      <feature>jdbc-4.1</feature>
    </featureManager>
    <keyStore id="defaultKeyStore" password="changeit"/>
    <quickStartSecurity userName="admin" userPassword="admin"/>
    
    <library id="jdbcLib">
      <fileset dir="${server.config.dir}/jdbc" includes="*.jar"/>
    </library>
    
    <dataSource id="DefaultDataSource">
      <jdbcDriver libraryRef="jdbcLib"/>
   	  <properties.derby.embedded databaseName="memory:defaultdb" createDatabase="create"/>
  	</dataSource>
  	-->
	<context-param>
		<param-name>cctpContextRoot</param-name>
		<param-value>cctp-webapp</param-value>
	</context-param>
    
	<library id="ojdbc4jLib">
    	<fileset dir="/mnt/b8a43320-20ea-42d1-85e6-ee5264fd59a6/" includes="ojdbc8.jar"/>
	</library>
	
	<dataSource id="db2xa" jndiName="jdbc/db2xa" type="javax.sql.XADataSource">
    	<jdbcDriver libraryRef="ojdbc4jLib"/>
    	 <properties.oracle URL="jdbc:oracle:thin:librosykekas/morrigan12@//192.168.1.50:1521/XE"/>
    	 <containerAuthData password="morrigan12" user="librosykekas"/>
	</dataSource>

    <applicationMonitor updateTrigger="mbean"/>

    <enterpriseApplication id="librosykekas" location="librosykekas.ear" name="librosykekas"/>
</server>